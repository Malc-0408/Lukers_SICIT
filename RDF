<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lukers - Sistema de Migración</title>
    <script src="https://apis.google.com/js/api.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e88e5 0%, #42a5f5 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #1e88e5 0%, #42a5f5 100%);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }

        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .logo {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            font-weight: bold;
            font-size: 1.5em;
        }

        .config-section {
            padding: 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .config-form {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 15px;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
            font-size: 0.9em;
        }

        .form-input, .form-select {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
            background: white;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: #1e88e5;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: #1565c0;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .auth-status {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-radius: 5px;
            background: #fff;
            border: 1px solid #ddd;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .connected {
            background: #28a745;
        }

        .disconnected {
            background: #dc3545;
        }

        .main-content {
            padding: 30px;
            display: none;
        }

        .tabs {
            display: flex;
            margin-bottom: 30px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .tab {
            flex: 1;
            padding: 15px 20px;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            font-weight: bold;
            font-size: 1em;
            transition: all 0.3s;
            color: #666;
        }

        .tab.active {
            background: #1e88e5;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #e3f2fd;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .proveedor-section {
            background: #f8f9fa;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
        }

        .proveedor-label {
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .proveedor-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 1.1em;
            color: #333;
            background: white;
        }

        .selection-options {
            display: none;
            margin-top: 20px;
        }

        .option-tabs {
            display: flex;
            margin-bottom: 20px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .option-tab {
            flex: 1;
            padding: 12px 10px;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            font-weight: bold;
            font-size: 0.9em;
            text-align: center;
            transition: all 0.3s;
            color: #666;
        }

        .option-tab.active {
            background: #1e88e5;
            color: white;
        }

        .option-content {
            display: none;
            background: #f9f9f9;
            border: 2px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            min-height: 200px;
        }

        .option-content.active {
            display: block;
        }

        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .checkbox-list {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            background: white;
        }

        .checkbox-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            transition: background-color 0.2s;
        }

        .checkbox-item:hover {
            background-color: #f0f0f0;
        }

        .checkbox-item:last-child {
            border-bottom: none;
        }

        .checkbox-item input {
            margin-right: 10px;
            transform: scale(1.2);
            accent-color: #1e88e5;
        }

        .checkbox-item label {
            cursor: pointer;
            flex: 1;
        }

        .selection-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            background: #e3f2fd;
            border-radius: 5px;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
        }

        .status-message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }

        .status-success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .status-error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .status-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #1e88e5;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .config-form {
                grid-template-columns: 1fr;
            }
            
            .two-column {
                grid-template-columns: 1fr;
            }
            
            .tabs, .option-tabs {
                flex-direction: column;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid;
            text-align: center;
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>SISTEMA DE MIGRACIÓN LUKERS</h1>
            <div class="logo">Lukers</div>
        </div>

        <div class="config-section">
            <div class="config-form">
                <div class="form-group">
                    <label class="form-label">Google OAuth Client ID:</label>
                    <input type="text" id="clientId" class="form-input" placeholder="xxxxxx.apps.googleusercontent.com">
                </div>
                <div class="form-group">
                    <label class="form-label">ID de la Hoja de Cálculo:</label>
                    <input type="text" id="spreadsheetId" class="form-input" placeholder="ID del Google Sheets">
                </div>
                <div>
                    <div class="auth-status">
                        <div id="statusIndicator" class="status-indicator disconnected"></div>
                        <span id="authStatus">No autenticado</span>
                    </div>
                    <div style="margin-top: 10px;">
                        <button id="signInBtn" class="btn btn-primary">INICIAR SESIÓN</button>
                        <button id="signOutBtn" class="btn btn-danger" style="display: none;">CERRAR SESIÓN</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="mainContent" class="main-content">
            <div class="tabs">
                <button class="tab active" onclick="switchTab('migration')">MIGRACIÓN</button>
                <button class="tab" onclick="switchTab('pdf')">GENERAR PDF</button>
                <button class="tab" onclick="switchTab('analysis')">ANÁLISIS</button>
            </div>

            <div id="migrationTab" class="tab-content active">
                <div class="proveedor-section">
                    <div class="proveedor-label">SELECCIONAR PROVEEDOR</div>
                    <select class="proveedor-select" id="proveedorSelect">
                        <option value="">-- Selecciona un proveedor --</option>
                    </select>
                </div>

                <div id="selectionOptions" class="selection-options">
                    <div class="option-tabs">
                        <button class="option-tab active" onclick="switchOption(1)">SELECCIÓN DIRECTA</button>
                        <button class="option-tab" onclick="switchOption(2)">POR INTERVALO</button>
                        <button class="option-tab" onclick="switchOption(3)">LISTA MÚLTIPLE</button>
                    </div>

                    <div class="option-content active" id="option1">
                        <div class="two-column">
                            <div class="form-group">
                                <label class="form-label">Parihuela:</label>
                                <select class="form-select" id="parihuela1">
                                    <option value="">-- Selecciona parihuela --</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Caja:</label>
                                <select class="form-select" id="caja1">
                                    <option value="">-- Selecciona caja --</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="option-content" id="option2">
                        <div class="form-group">
                            <label class="form-label">Parihuela:</label>
                            <select class="form-select" id="parihuela2">
                                <option value="">-- Selecciona parihuela --</option>
                            </select>
                        </div>
                        <div class="two-column">
                            <div class="form-group">
                                <label class="form-label">Caja Desde:</label>
                                <select class="form-select" id="cajaDesde">
                                    <option value="">-- Caja inicial --</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Caja Hasta:</label>
                                <select class="form-select" id="cajaHasta">
                                    <option value="">-- Caja final --</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="option-content" id="option3">
                        <div class="form-group">
                            <label class="form-label">Selecciona las combinaciones:</label>
                            <div class="selection-controls">
                                <div>
                                    <button type="button" class="btn btn-primary" onclick="selectAll()">SELECCIONAR TODOS</button>
                                    <button type="button" class="btn" onclick="selectNone()">DESELECCIONAR</button>
                                </div>
                                <div id="selectionCounter">0 elementos seleccionados</div>
                            </div>
                            <div class="checkbox-list" id="checkboxList"></div>
                        </div>
                    </div>

                    <div class="action-buttons">
                        <button id="migrateBtn" class="btn btn-success" onclick="procesarMigracion()">MIGRAR SELECCIÓN</button>
                        <button id="generatePdfBtn" class="btn btn-primary" onclick="generarPDFs()">GENERAR PDFs</button>
                    </div>
                </div>

                <div id="statusMessage" class="status-message"></div>
            </div>

            <div id="pdfTab" class="tab-content">
                <h3>Generación de PDFs</h3>
                <p>Los PDFs se generan automáticamente después de la migración usando jsPDF.</p>
                <div class="action-buttons">
                    <button class="btn btn-primary" onclick="generarPDFsManual()">GENERAR PDFs MANUAL</button>
                </div>
            </div>

            <div id="analysisTab" class="tab-content">
                <h3>Análisis de Datos</h3>
                <div class="action-buttons">
                    <button class="btn btn-primary" onclick="analizarDatos()">ANALIZAR CLASIFICACIÓN</button>
                </div>
                <div id="analysisResults"></div>
            </div>
        </div>
    </div>

    <script>
        // Configuración OAuth 2.0
        const DISCOVERY_DOC = 'https://sheets.googleapis.com/$discovery/rest?version=v4';
        const SCOPES = 'https://www.googleapis.com/auth/spreadsheets';

        // Variables globales
        let gapi_loaded = false;
        let gis_loaded = false;
        let tokenClient;
        let spreadsheetId = '';
        let datosCompletos = null;
        let opcionActiva = 1;

        // Cargar APIs de Google
        function gapiLoaded() {
            gapi.load('client', initializeGapiClient);
        }

        async function initializeGapiClient() {
            await gapi.client.init({
                discoveryDocs: [DISCOVERY_DOC],
            });
            gapi_loaded = true;
            maybeEnableButtons();
        }

        function gisLoaded() {
            const clientId = document.getElementById('clientId').value;
            if (clientId) {
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: clientId,
                    scope: SCOPES,
                    callback: tokenCallback,
                });
                gis_loaded = true;
                maybeEnableButtons();
            }
        }

        function maybeEnableButtons() {
            if (gapi_loaded && gis_loaded) {
                document.getElementById('signInBtn').style.display = 'block';
            }
        }

        // Callback para el token OAuth
        function tokenCallback(resp) {
            if (resp.error !== undefined) {
                showStatus('Error de autenticación: ' + resp.error, 'error');
                return;
            }
            
            updateAuthStatus(true);
            showStatus('Autenticado correctamente con Google', 'success');
            document.getElementById('mainContent').style.display = 'block';
            cargarProveedores();
        }

        // Actualizar estado de autenticación
        function updateAuthStatus(isSignedIn) {
            const indicator = document.getElementById('statusIndicator');
            const status = document.getElementById('authStatus');
            const signInBtn = document.getElementById('signInBtn');
            const signOutBtn = document.getElementById('signOutBtn');

            if (isSignedIn) {
                indicator.className = 'status-indicator connected';
                status.textContent = 'Autenticado';
                signInBtn.style.display = 'none';
                signOutBtn.style.display = 'inline-block';
            } else {
                indicator.className = 'status-indicator disconnected';
                status.textContent = 'No autenticado';
                signInBtn.style.display = 'inline-block';
                signOutBtn.style.display = 'none';
                document.getElementById('mainContent').style.display = 'none';
            }
        }

        // Iniciar sesión
        function signIn() {
            const clientId = document.getElementById('clientId').value.trim();
            spreadsheetId = document.getElementById('spreadsheetId').value.trim();
            
            if (!clientId || !spreadsheetId) {
                showStatus('Por favor completa el Client ID y el ID de la hoja', 'error');
                return;
            }

            // Guardar configuración
            localStorage.setItem('lukers_client_id', clientId);
            localStorage.setItem('lukers_spreadsheet_id', spreadsheetId);

            if (!tokenClient) {
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: clientId,
                    scope: SCOPES,
                    callback: tokenCallback,
                });
            }

            tokenClient.callback = tokenCallback;

            if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                tokenClient.requestAccessToken({prompt: ''});
            }
        }

        // Cerrar sesión
        function signOut() {
            const token = gapi.client.getToken();
            if (token !== null) {
                google.accounts.oauth2.revoke(token.access_token);
                gapi.client.setToken('');
            }
            updateAuthStatus(false);
            showStatus('Sesión cerrada', 'success');
        }

        // Cargar proveedores desde Google Sheets
        async function cargarProveedores() {
            try {
                showStatus('Cargando datos de proveedores...', 'success');

                const response = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: spreadsheetId,
                    range: 'Clasificación!A:Z',
                });

                const values = response.result.values;
                if (!values || values.length <= 1) {
                    showStatus('No hay datos en la hoja de Clasificación', 'warning');
                    return;
                }

                const encabezados = values[0];
                const cols = {};
                encabezados.forEach((header, index) => {
                    cols[header] = index;
                });

                if (cols['PARIHUELA'] === undefined || cols['CAJA'] === undefined || cols['ID Proveedor'] === undefined) {
                    showStatus('Error: No se encontraron las columnas requeridas', 'error');
                    return;
                }

                const proveedores = new Set();
                const combinacionesPorProveedor = {};

                for (let i = 1; i < values.length; i++) {
                    const proveedor = String(values[i][cols['ID Proveedor']] || '').trim();
                    const parihuela = String(values[i][cols['PARIHUELA']] || '').trim();
                    const caja = String(values[i][cols['CAJA']] || '').trim();

                    if (proveedor && parihuela && caja) {
                        proveedores.add(proveedor);

                        if (!combinacionesPorProveedor[proveedor]) {
                            combinacionesPorProveedor[proveedor] = new Set();
                        }
                        combinacionesPorProveedor[proveedor].add(parihuela + '|' + caja);
                    }
                }

                // Preparar datos para la UI
                datosCompletos = {
                    proveedores: Array.from(proveedores).sort(),
                    combinacionesPorProveedor: {}
                };

                Object.keys(combinacionesPorProveedor).forEach(proveedor => {
                    datosCompletos.combinacionesPorProveedor[proveedor] = Array.from(combinacionesPorProveedor[proveedor])
                        .map(combo => {
                            const parts = combo.split('|');
                            return { parihuela: parts[0], caja: parts[1] };
                        })
                        .sort((a, b) => {
                            const numParihuelaA = parseInt(a.parihuela);
                            const numParihuelaB = parseInt(b.parihuela);
                            
                            if (numParihuelaA === numParihuelaB) {
                                return parseInt(a.caja) - parseInt(b.caja);
                            }
                            return numParihuelaA - numParihuelaB;
                        });
                });

                // Actualizar selector de proveedores
                const select = document.getElementById('proveedorSelect');
                select.innerHTML = '<option value="">-- Selecciona un proveedor --</option>';
                
                datosCompletos.proveedores.forEach(proveedor => {
                    const option = document.createElement('option');
                    option.value = proveedor;
                    option.textContent = proveedor;
                    select.appendChild(option);
                });

                showStatus(`Datos cargados: ${proveedores.size} proveedores encontrados`, 'success');

            } catch (error) {
                console.error('Error cargando proveedores:', error);
                showStatus(`Error cargando proveedores: ${error.message}`, 'error');
            }
        }

        // Procesar migración completa
        async function procesarMigracion() {
            try {
                const proveedor = document.getElementById('proveedorSelect').value;
                if (!proveedor) {
                    showStatus('Selecciona un proveedor', 'error');
                    return;
                }

                const selecciones = obtenerSelecciones();
                if (selecciones.length === 0) {
                    showStatus('No hay selecciones válidas para procesar', 'warning');
                    return;
                }

                const migrateBtn = document.getElementById('migrateBtn');
                const originalText = migrateBtn.textContent;
                migrateBtn.innerHTML = '<span class="loading"></span> PROCESANDO...';
                migrateBtn.disabled = true;

                // Obtener datos de clasificación
                const classificationResponse = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: spreadsheetId,
                    range: 'Clasificación!A:Z',
                });

                const datosClasificacion = classificationResponse.result.values;
                const encabezados = datosClasificacion[0];
                const cols = crearMapaColumnas(encabezados);

                let exitosas = 0;
                let errores = 0;

                // Procesar cada selección
                for (const seleccion of selecciones) {
                    try {
                        await procesarSeleccionIndividual(seleccion, datosClasificacion, cols);
                        exitosas++;
                    } catch (error) {
                        console.error('Error procesando selección:', error);
                        errores++;
                    }
                }

                if (exitosas > 0) {
                    showStatus(`Migración completada: ${exitosas} elementos migrados, ${errores} errores`, 'success');
                } else {
                    showStatus(`Migración fallida: ${errores} errores encontrados`, 'error');
                }

            } catch (error) {
                console.error('Error en migración:', error);
                showStatus(`Error en migración: ${error.message}`, 'error');
            } finally {
                const migrateBtn = document.getElementById('migrateBtn');
                migrateBtn.textContent = 'MIGRAR SELECCIÓN';
                migrateBtn.disabled = false;
            }
        }

        // Procesar una selección individual
        async function procesarSeleccionIndividual(seleccion, datosClasificacion, cols) {
            // Filtrar datos según la selección
            const datosFiltrados = filtrarDatosPorSeleccion(seleccion, datosClasificacion, cols);
            
            if (datosFiltrados.length === 0) {
                throw new Error('No se encontraron datos para la selección');
            }

            // Agrupar datos
            const grupos = agruparDatosParaMigracion(datosFiltrados, cols);
            
            if (Object.keys(grupos).length === 0) {
                throw new Error('No se pudieron agrupar los datos');
            }

            // Verificar si existe la hoja GENERADOR DE ROTULO
            try {
                await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: spreadsheetId,
                    range: 'GENERADOR DE ROTULO!A1:B1',
                });
            } catch (error) {
                // Crear la hoja si no existe
                await crearHojaGeneradorRotulo();
            }

            // Preparar datos para insertar
            const filasNuevas = prepararFilasParaInsertar(grupos);
            
            // Obtener la siguiente fila disponible
            const generadorResponse = await gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: spreadsheetId,
                range: 'GENERADOR DE ROTULO!A:A',
            });

            const ultimaFila = (generadorResponse.result.values || []).length + 1;
            const rango = `GENERADOR DE ROTULO!A${ultimaFila}:BZ${ultimaFila + filasNuevas.length - 1}`;

            // Escribir datos
            await gapi.client.sheets.spreadsheets.values.update({
                spreadsheetId: spreadsheetId,
                range: rango,
                valueInputOption: 'RAW',
                resource: {
                    values: filasNuevas
                }
            });
        }

        // Crear hoja GENERADOR DE ROTULO si no existe
        async function crearHojaGeneradorRotulo() {
            const encabezados = [
                'ID', 'ID PROVEEDOR', 'MARCA', 'GENERO', 'DESCRIPCIÓN', 'CODIGO', 'COLOR', 
                'MUNDO', 'PARIHUELA', 'CAJA', 'VALIDADOR'
            ];
            
            // Agregar encabezados de tallas
            const letras = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'];
            letras.forEach(letra => {
                encabezados.push(`TALLA 1${letra}`, `TALLA 2${letra}`, `CANTIDAD ${letra}`);
            });
            
            encabezados.push('FECHA CREACION');

            await gapi.client.sheets.spreadsheets.values.update({
                spreadsheetId: spreadsheetId,
                range: 'GENERADOR DE ROTULO!A1:BZ1',
                valueInputOption: 'RAW',
                resource: {
                    values: [encabezados]
                }
            });
        }

        // Funciones auxiliares (iguales a las anteriores)
        function obtenerSelecciones() {
            const proveedor = document.getElementById('proveedorSelect').value;
            const selecciones = [];

            if (opcionActiva === 1) {
                const parihuela = document.getElementById('parihuela1').value;
                const caja = document.getElementById('caja1').value;
                if (parihuela && caja) {
                    selecciones.push({ proveedor, parihuela, caja });
                }
            } else if (opcionActiva === 2) {
                const parihuela = document.getElementById('parihuela2').value;
                const cajaDesde = document.getElementById('cajaDesde').value;
                const cajaHasta = document.getElementById('cajaHasta').value;
                
                if (parihuela && cajaDesde && cajaHasta) {
                    const combinaciones = datosCompletos.combinacionesPorProveedor[proveedor];
                    const cajasEnRango = combinaciones
                        .filter(c => c.parihuela === parihuela)
                        .map(c => c.caja)
                        .filter(c => parseInt(c) >= parseInt(cajaDesde) && parseInt(c) <= parseInt(cajaHasta));
                    
                    cajasEnRango.forEach(caja => {
                        selecciones.push({ proveedor, parihuela, caja });
                    });
                }
            } else if (opcionActiva === 3) {
                const checkboxes = document.querySelectorAll('#checkboxList input[type="checkbox"]:checked');
                checkboxes.forEach(checkbox => {
                    const parts = checkbox.value.split('|');
                    selecciones.push({ proveedor, parihuela: parts[0], caja: parts[1] });
                });
            }

            return selecciones;
        }

        function filtrarDatosPorSeleccion(seleccion, datos, cols) {
            const datosFiltrados = [];
            
            for (let i = 1; i < datos.length; i++) {
                const fila = datos[i];
                
                const proveedorFila = String(fila[cols['ID Proveedor']] || '').trim();
                const parihuelaFila = String(fila[cols['PARIHUELA']] || '').trim();
                const cajaFila = String(fila[cols['CAJA']] || '').trim();
                
                const coincide = proveedorFila === seleccion.proveedor &&
                                parihuelaFila === seleccion.parihuela &&
                                cajaFila === seleccion.caja;
                
                if (coincide) {
                    datosFiltrados.push(fila);
                }
            }
            
            return datosFiltrados;
        }

        function agruparDatosParaMigracion(datosFiltrados, cols) {
            const grupos = {};
            
            datosFiltrados.forEach(fila => {
                const clave = [
                    String(fila[cols['DESCRIPCIÓN']] || '').trim(),
                    String(fila[cols['MUNDO']] || '').trim(),
                    String(fila[cols['MARCA']] || '').trim(),
                    String(fila[cols['GENERO']] || '').trim(),
                    String(fila[cols['PARIHUELA']] || '').trim(),
                    String(fila[cols['CAJA']] || '').trim()
                ].join('|');
                
                if (!grupos[clave]) {
                    grupos[clave] = {
                        info: {
                            proveedor: fila[cols['ID Proveedor']] || '',
                            marca: fila[cols['MARCA']] || '',
                            genero: fila[cols['GENERO']] || '',
                            descripcion: fila[cols['DESCRIPCIÓN']] || '',
                            mundo: fila[cols['MUNDO']] || '',
                            parihuela: fila[cols['PARIHUELA']] || '',
                            caja: fila[cols['CAJA']] || '',
                            codigo: fila[cols['CODIGO']] || '',
                            color: fila[cols['COLOR']] || '',
                            validador: fila[cols['VALIDADOR']] || ''
                        },
                        tallas: []
                    };
                }
                
                const talla1 = String(fila[cols['TALLA 1']] || '').trim();
                const talla2 = String(fila[cols['TALLA 2']] || '').trim();
                const cantidad = String(fila[cols['CANTIDAD']] || '').trim();
                
                if (talla1 || talla2 || cantidad) {
                    const tallaExistente = grupos[clave].tallas.find(t => 
                        String(t.talla1 || '').trim() === talla1 && 
                        String(t.talla2 || '').trim() === talla2
                    );
                    
                    if (tallaExistente) {
                        tallaExistente.cantidad = (parseFloat(tallaExistente.cantidad) || 0) + (parseFloat(cantidad) || 0);
                    } else {
                        grupos[clave].tallas.push({
                            talla1: talla1 || '',
                            talla2: talla2 || '',
                            cantidad: cantidad || ''
                        });
                    }
                }
            });
            
            return grupos;
        }

        function prepararFilasParaInsertar(grupos) {
            const filasNuevas = [];
            
            Object.keys(grupos).forEach(clave => {
                const grupo = grupos[clave];
                
                const fila = [
                    generarUUID(),
                    grupo.info.proveedor,
                    grupo.info.marca,
                    grupo.info.genero,
                    grupo.info.descripcion,
                    grupo.info.codigo,
                    grupo.info.color,
                    grupo.info.mundo,
                    grupo.info.parihuela,
                    grupo.info.caja,
                    grupo.info.validador
                ];
                
                // Agregar hasta 20 tallas
                for (let i = 0; i < 20; i++) {
                    if (i < grupo.tallas.length) {
                        fila.push(grupo.tallas[i].talla1);
                        fila.push(grupo.tallas[i].talla2);
                        fila.push(grupo.tallas[i].cantidad);
                    } else {
                        fila.push('', '', '');
                    }
                }
                
                fila.push(new Date().toISOString());
                filasNuevas.push(fila);
            });
            
            return filasNuevas;
        }

        function crearMapaColumnas(encabezados) {
            const cols = {};
            encabezados.forEach((header, index) => {
                cols[header] = index;
            });
            return cols;
        }

        function generarUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Funciones de UI
        function cambiarProveedor() {
            const proveedor = document.getElementById('proveedorSelect').value;
            const optionsContainer = document.getElementById('selectionOptions');
            
            if (proveedor && datosCompletos) {
                optionsContainer.style.display = 'block';
                cargarCombinacionesProveedor(proveedor);
            } else {
                optionsContainer.style.display = 'none';
            }
        }

        function cargarCombinacionesProveedor(proveedor) {
            const combinaciones = datosCompletos.combinacionesPorProveedor[proveedor] || [];
            
            const parihuelas = [...new Set(combinaciones.map(c => c.parihuela))]
                .sort((a, b) => parseInt(a) - parseInt(b));
            const cajas = [...new Set(combinaciones.map(c => c.caja))]
                .sort((a, b) => parseInt(a) - parseInt(b));
            
            cargarSelect('parihuela1', parihuelas);
            cargarSelect('caja1', cajas);
            cargarSelect('parihuela2', parihuelas);
            cargarSelect('cajaDesde', cajas);
            cargarSelect('cajaHasta', cajas);
            
            cargarListaMultiple(combinaciones);
        }

        function cargarSelect(id, opciones) {
            const select = document.getElementById(id);
            select.innerHTML = '<option value="">-- Selecciona --</option>';
            
            opciones.forEach(opcion => {
                const option = document.createElement('option');
                option.value = opcion;
                option.textContent = opcion;
                select.appendChild(option);
            });
        }

        function cargarListaMultiple(combinaciones) {
            const lista = document.getElementById('checkboxList');
            lista.innerHTML = '';
            
            combinaciones.forEach((combo, index) => {
                const item = document.createElement('div');
                item.className = 'checkbox-item';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = 'combo_' + index;
                checkbox.value = combo.parihuela + '|' + combo.caja;
                checkbox.onchange = actualizarContador;
                
                const label = document.createElement('label');
                label.htmlFor = 'combo_' + index;
                label.textContent = `Parihuela: ${combo.parihuela} - Caja: ${combo.caja}`;
                
                item.appendChild(checkbox);
                item.appendChild(label);
                lista.appendChild(item);
            });
            
            actualizarContador();
        }

        function selectAll() {
            const checkboxes = document.querySelectorAll('#checkboxList input[type="checkbox"]');
            checkboxes.forEach(checkbox => checkbox.checked = true);
            actualizarContador();
        }

        function selectNone() {
            const checkboxes = document.querySelectorAll('#checkboxList input[type="checkbox"]');
            checkboxes.forEach(checkbox => checkbox.checked = false);
            actualizarContador();
        }

        function actualizarContador() {
            const checkboxes = document.querySelectorAll('#checkboxList input[type="checkbox"]:checked');
            const contador = checkboxes.length;
            document.getElementById('selectionCounter').textContent = 
                `${contador} elemento${contador !== 1 ? 's' : ''} seleccionado${contador !== 1 ? 's' : ''}`;
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(tabName + 'Tab').classList.add('active');
        }

        function switchOption(optionNum) {
            opcionActiva = optionNum;
            
            document.querySelectorAll('.option-tab').forEach((tab, index) => {
                tab.classList.toggle('active', index + 1 === optionNum);
            });
            
            document.querySelectorAll('.option-content').forEach((content, index) => {
                content.classList.toggle('active', index + 1 === optionNum);
            });
        }

        function generarPDFs() {
            showStatus('Generación de PDFs usando jsPDF implementada próximamente', 'warning');
        }

        function generarPDFsManual() {
            showStatus('Funcionalidad manual de PDFs en desarrollo', 'warning');
        }

        async function analizarDatos() {
            try {
                showStatus('Analizando datos...', 'success');
                
                const response = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: spreadsheetId,
                    range: 'Clasificación!A:Z',
                });

                const values = response.result.values;
                if (!values || values.length <= 1) {
                    showStatus('No hay datos para analizar', 'warning');
                    return;
                }

                const encabezados = values[0];
                const cols = crearMapaColumnas(encabezados);
                
                // Análisis básico
                const totalRegistros = values.length - 1;
                const proveedores = new Set();
                const grupos = {};

                for (let i = 1; i < values.length; i++) {
                    const fila = values[i];
                    const proveedor = String(fila[cols['ID Proveedor']] || '').trim();
                    if (proveedor) proveedores.add(proveedor);
                    
                    const clave = [
                        fila[cols['DESCRIPCIÓN']],
                        fila[cols['MUNDO']],
                        fila[cols['MARCA']],
                        fila[cols['GENERO']],
                        fila[cols['PARIHUELA']],
                        fila[cols['CAJA']]
                    ].join('|');
                    
                    if (!grupos[clave]) {
                        grupos[clave] = 0;
                    }
                    grupos[clave]++;
                }

                const totalGrupos = Object.keys(grupos).length;
                const maxTallas = Math.max(...Object.values(grupos));
                const gruposGrandes = Object.values(grupos).filter(count => count > 20).length;

                // Mostrar resultados
                const resultsDiv = document.getElementById('analysisResults');
                resultsDiv.innerHTML = `
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin-top: 20px;">
                        <h4 style="color: #1e88e5; margin-bottom: 15px;">Análisis de Clasificación</h4>
                        
                        <div class="stats-grid">
                            <div class="stat-card" style="border-left-color: #28a745;">
                                <div class="stat-value" style="color: #28a745;">${totalRegistros.toLocaleString()}</div>
                                <div class="stat-label">Total Registros</div>
                            </div>
                            
                            <div class="stat-card" style="border-left-color: #1e88e5;">
                                <div class="stat-value" style="color: #1e88e5;">${totalGrupos.toLocaleString()}</div>
                                <div class="stat-label">Grupos Únicos</div>
                            </div>
                            
                            <div class="stat-card" style="border-left-color: #ffc107;">
                                <div class="stat-value" style="color: #ffc107;">${proveedores.size}</div>
                                <div class="stat-label">Proveedores</div>
                            </div>
                            
                            <div class="stat-card" style="border-left-color: #dc3545;">
                                <div class="stat-value" style="color: #dc3545;">${maxTallas}</div>
                                <div class="stat-label">Max Tallas/Grupo</div>
                            </div>
                        </div>
                        
                        ${gruposGrandes > 0 ? `
                            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin-top: 15px;">
                                <strong style="color: #856404;">⚠️ Atención:</strong> 
                                ${gruposGrandes} grupos tienen más de 20 tallas (límite del sistema)
                            </div>
                        ` : ''}
                    </div>
                `;
                
                showStatus('Análisis completado', 'success');

            } catch (error) {
                console.error('Error en análisis:', error);
                showStatus(`Error en análisis: ${error.message}`, 'error');
            }
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.className = `status-message status-${type}`;
            statusDiv.textContent = message;
            statusDiv.style.display = 'block';

            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 5000);
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Cargar configuración guardada
            const savedClientId = localStorage.getItem('lukers_client_id');
            const savedSpreadsheetId = localStorage.getItem('lukers_spreadsheet_id');
            
            if (savedClientId) document.getElementById('clientId').value = savedClientId;
            if (savedSpreadsheetId) document.getElementById('spreadsheetId').value = savedSpreadsheetId;

            // Event listeners
            document.getElementById('signInBtn').addEventListener('click', signIn);
            document.getElementById('signOutBtn').addEventListener('click', signOut);
            document.getElementById('proveedorSelect').addEventListener('change', cambiarProveedor);
            
            // Cargar APIs de Google
            gapiLoaded();
        });

        // Cargar Google Identity Services
        window.onload = function() {
            gisLoaded();
        };
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
</body>
</html>
